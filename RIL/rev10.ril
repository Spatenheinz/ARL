begin main
includeC "A = 0;\n";
// initialize hash codes
hashA += 366001;
hashB += 827927;
hashC += 593041;
hashT += hashA;
// heap size setup
// read m; // log of heap size
b += 8; // segment size
b1 += b - 1;
hsize += 1<<15;
hsize += b1; // number of nodes = 2^m + b - 1
hsizeB += hsize << 2;
hsizeB += hsize << 2;
hsizeB += hsize << 2; // number of bytes
H += 4800; // heap start
endH += hsizeB + H; // heap end
lastH += endH - 12; // address of last node in heap
mask += 4<<15; // Mask used for hashing: 4*(2^m)
mask -= 4;
segSize += b1<<2;
segSize += b1<<2;
segSize += b1<<2;
stackP += endH;
stackP += 64;
call initialise;
call build;


call reverse;


includeC "printf(\"max refs = %d\\n\",A);";
assert z == 0;
z += H;
dump1 <-- H != z;
M[z] > 0 --> used1;
y += 1;
used1 <-- M[z] > 0;
z += 12;
z < endH --> dump1;
test y "%d,"
end main


begin initialise
consA += 2;
consD += 2;
call cons;
nilnil <-> consP
end initialise


begin build
consD += 2;
consA += 7;
call cons;
A <-> consP;
skip
end build


begin reverse
skip
--> reverse_entry_1
reverse_exit_1 <--
skip
end reverse

reverse_entry_1 <--
// input of rule1
xs <-> A;
A != 0 --> reverse_entry_2;

//def starts here

C2__ys_rev_xs_C2__reverse3 <-- A != 0;
A & 3 --> inv_xs_C2_reverse5;
A == 0 --> inv_xs_C2_reverse7;
A <-> consP;
uncall cons;
inv_t_reverse5xs_C2_ <-> consA;
inv_t_reverse6xs_C2_ <-> consD;
xs <-> inv_t_reverse5xs_C2_;
inv_t_reverse5xs_C2_ != 0 --> inv_xs_C2_reverse6;
inv_xs_C2_reverse7 <-- inv_t_reverse6xs_C2_ == 0;
inv_t_reverse6xs_C2_ != 0 --> inv_5reverse8;
inv_t_reverse6xs_C2_ += 2;
inv_5reverse8 <-- inv_t_reverse6xs_C2_ != 2;
inv_xs_C2_reverse6 <-- inv_t_reverse5xs_C2_ != 0;
xs <-> inv_t_reverse5xs_C2_;
inv_t_reverse5xs_C2_ <-> consA;
inv_t_reverse6xs_C2_ <-> consD;
call cons;
A <-> consP;
inv_xs_C2_reverse5 <-- A & 3;
A & 3 --> C2__ysreverse12;
A <-> consP;
uncall cons;
t12C2__ys <-> consA;
t13C2__ys <-> consD;
t12C2__ys != 2 --> reverse15;
t12C2__ys -= 2;
reverse15 <-- t12C2__ys != 0;
t12C2__ys != 0 --> reverse13;
ys <-> t13C2__ys;
t13C2__ys == 0 --> reverse14;
reverse13 <-- t12C2__ys != 0;
t12C2__ys != 0 --> inv_5reverse18;
t12C2__ys += 2;
inv_5reverse18 <-- t12C2__ys != 2;
t12C2__ys <-> consA;
t13C2__ys <-> consD;
call cons;
A <-> consP;
reverse14 <-- A == 0;
C2__ysreverse12 <-- A & 3;
A == 0 --> C2__ys_rev_xs_C2__reverse4;
call rev
 -->C2__ys_rev_xs_C2__reverse3
C2__ys_rev_xs_C2__reverse4 <--
assert A == 0;
reverse_exit_2 <-- A != 0;

 // res starts here

ys <-> A;
skip
--> reverse_exit_1

reverse_entry_2 <--
assert A != A
--> reverse_exit_2
begin rev
skip
--> rev_entry_1
rev_exit_1 <--
skip
end rev

rev_entry_1 <--
// input of rule1
A & 3 --> x_xs_ysrev1;
A <-> consP;
uncall cons;
t1x_xs_ys <-> consA;
t2x_xs_ys <-> consD;
t1x_xs_ys & 3 --> x_xsrev4;
t1x_xs_ys <-> consP;
uncall cons;
t4x_xs <-> consA;
t5x_xs <-> consD;
x <-> t4x_xs;
t4x_xs != 0 --> rev5;
xs <-> t5x_xs;
t5x_xs == 0 --> rev6;
rev5 <-- t4x_xs != 0;
x <-> t4x_xs;
t4x_xs <-> consA;
t5x_xs <-> consD;
call cons;
t1x_xs_ys <-> consP;
rev6 <-- t1x_xs_ys == 0;
x_xsrev4 <-- t1x_xs_ys & 3;
t1x_xs_ys != 0 --> rev2;
ys <-> t2x_xs_ys;
t2x_xs_ys == 0 --> rev3;
rev2 <-- t1x_xs_ys != 0;
t1x_xs_ys & 3 --> inv_x_xsrev13;
t1x_xs_ys == 0 --> inv_x_xsrev15;
t1x_xs_ys <-> consP;
uncall cons;
inv_t_rev13x_xs <-> consA;
inv_t_rev14x_xs <-> consD;
x <-> inv_t_rev13x_xs;
inv_t_rev13x_xs != 0 --> inv_x_xsrev14;
inv_x_xsrev15 <-- inv_t_rev14x_xs == 0;
xs <-> inv_t_rev14x_xs;
inv_x_xsrev14 <-- inv_t_rev13x_xs != 0;
x <-> inv_t_rev13x_xs;
inv_t_rev13x_xs <-> consA;
inv_t_rev14x_xs <-> consD;
call cons;
t1x_xs_ys <-> consP;
inv_x_xsrev13 <-- t1x_xs_ys & 3;
t1x_xs_ys <-> consA;
t2x_xs_ys <-> consD;
call cons;
A <-> consP;
rev3 <-- A == 0;
x_xs_ysrev1 <-- A & 3;
A != 0 --> rev_entry_2;

//def starts here


rev_exit_2 <-- A != 0;

 // res starts here

A & 3 --> inv_xs_x_ysrev14;
A == 0 --> inv_xs_x_ysrev16;
A <-> consP;
uncall cons;
inv_t_rev14xs_x_ys <-> consA;
inv_t_rev15xs_x_ys <-> consD;
xs <-> inv_t_rev14xs_x_ys;
inv_t_rev14xs_x_ys != 0 --> inv_xs_x_ysrev15;
inv_xs_x_ysrev16 <-- inv_t_rev15xs_x_ys == 0;
inv_t_rev15xs_x_ys & 3 --> inv_x_ysrev17;
inv_t_rev15xs_x_ys == 0 --> inv_x_ysrev19;
inv_t_rev15xs_x_ys <-> consP;
uncall cons;
inv_t_rev17x_ys <-> consA;
inv_t_rev18x_ys <-> consD;
x <-> inv_t_rev17x_ys;
inv_t_rev17x_ys != 0 --> inv_x_ysrev18;
inv_x_ysrev19 <-- inv_t_rev18x_ys == 0;
ys <-> inv_t_rev18x_ys;
inv_x_ysrev18 <-- inv_t_rev17x_ys != 0;
x <-> inv_t_rev17x_ys;
inv_t_rev17x_ys <-> consA;
inv_t_rev18x_ys <-> consD;
call cons;
inv_t_rev15xs_x_ys <-> consP;
inv_x_ysrev17 <-- inv_t_rev15xs_x_ys & 3;
inv_xs_x_ysrev15 <-- inv_t_rev14xs_x_ys != 0;
xs <-> inv_t_rev14xs_x_ys;
inv_t_rev14xs_x_ys <-> consA;
inv_t_rev15xs_x_ys <-> consD;
call cons;
A <-> consP;
inv_xs_x_ysrev14 <-- A & 3;
skip
--> rev_exit_1

rev_entry_2 <--
assert A != A
--> rev_exit_2
begin copy
assert copyP > 0 && copyQ == 0;
copyP < H --> copySymbol;
M[copyP] += 1;
ttt += M[copyP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[copyP];
copySymbol <-- copyP < H;
copyQ += copyP;
assert copyP > 0 && copyQ == copyP
end copy
//The rest of the file is cons
begin cons
assert consA != 0;
assert consD != 0;
assert consP == 0;
assert hashV == 0;
assert segEnd == 0;
call hash;
segEnd += hashV + segSize;
consP += hashV;
consSearchSame <-- consP > hashV;
M[consP] == 0 --> consNext;
consP += 4;
M[consP] != consA --> consNotA;
consP += 4;
M[consP] == consD --> consFoundSame;
consP -= 4;
consNotA <-- M[consP] != consA;
consP -= 4;
consNext <-- M[consP] == 0;
consP += 12;
consP <= segEnd --> consSearchSame;
consSearchEmpty <-- consP <= segEnd;
consP -= 12;
consP < hashV --> consFail;
M[consP] != 0 --> consSearchEmpty;
segEnd -= hashV + segSize;
uncall hash;
M[consP] += 1;
consP += 4;
consA <-> M[consP];
consP += 4;
consD <-> M[consP];
consP -= 8;
consEnd <-- M[consP] > 1;
assert consP !& 3 && consP >= H && consA == 0 && consD == 0;
assert hashV == 0 && segEnd == 0;
failedCons <-- failed > 0 // return point for fail handler
end cons

consFoundSame <--
segEnd -= hashV + segSize; // was 60
uncall hash;
consD < H --> consSymbolD;
M[consD] -= 1;
consSymbolD <-- consD < H;
consD -= M[consP];
consP -= 4;
consA < H --> consSymbolA;
M[consA] -= 1;
consSymbolA <-- consA < H;
consA -= M[consP];
consP -= 4;
M[consP] += 1;
ttt += M[consP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[consP]
--> consEnd
consFail <--
failed += 1;
assert z == 0;
z += H;
dump <-- H != z;
M[z] > 0 --> used;
y += 1;
used <-- M[z] > 0;
z += 12;
z < endH --> dump;
test y " free nodes: %d,"
--> failedCons // jump to end of cons procedure

begin hash
assert hashV == 0 && hashT ==  366001;
hashT ^= consA << 7;
hashT += consA >> 1;
hashT ^= consD << 5;
hashT += consD >> 3;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += H
end hash
