begin main
includeC "A = 0;\n";
// initialize hash codes
hashA += 366001;
hashB += 827927;
hashC += 593041;
hashT += hashA;
// heap size setup
// read m; // log of heap size
b += 8; // segment size
b1 += b - 1;
hsize += 1<<15;
hsize += b1; // number of nodes = 2^m + b - 1
hsizeB += hsize << 2;
hsizeB += hsize << 2;
hsizeB += hsize << 2; // number of bytes
H += 4800; // heap start
endH += hsizeB + H; // heap end
lastH += endH - 12; // address of last node in heap
mask += 4<<15; // Mask used for hashing: 4*(2^m)
mask -= 4;
segSize += b1<<2;
segSize += b1<<2;
segSize += b1<<2;
stackP += endH;
stackP += 64;
call initialise;
call build;


call flip;
begin build    // build list into A0
  consD += 7;  // []
  consA += 9;  // integer 1
  call cons;
  lhs1 <-> consP;
  consA += 11;
  consD += 13;
  test consA consD "snd %d %d";
  call cons;
  lhs2 <-> consP;
  lhs1 <-> consA;
  lhs2 <-> consD;
  call cons;
  lhs <-> consP;
  consD += 3;
  consA += 5;  // integer 12
  // call cons;
  // consP <-> consD;
  // consA += 5;
  test consP "%d\n";
  call cons;
  lhs <-> consA;
  consP <-> consD;
  call cons;
  A <-> consP
end build

includeC "printf(\"max refs = %d\\n\",A);";
assert z == 0;
z += H;
dump1 <-- H != z;
M[z] > 0 --> used1;
y += 1;
used1 <-- M[z] > 0;
z += 12;
z < endH --> dump1;
test y "%d,"
end main


begin initialise
consA += 2;
consD += 2;
call cons;
nilnil <-> consP
end initialise


begin build
consD += 2;
consA += 7;
call cons;
A <-> consP;
skip
end build


begin flip
skip
--> flip_entry_1
flip_exit_1 <--
skip
end flip

flip_entry_1 <--
// input of rule1

//Patterns starts here
A & 3 --> flip7;
A <-> consP;
uncall cons;
t7l_r <-> consA;
t8l_r <-> consD;
l <-> t7l_r;
t7l_r != 0 --> flip8;
r <-> t8l_r;
flip9 == 0 -->flip9;
flip8 <-- t7l_r != 0;
l <-> t7l_r;
t7l_r <-> consA;
t8l_r <-> consD;
call cons;
A <-> consP;
flip9 <-- A == 0;
flip7 <-- A & 3;
A != 0 --> flip_entry_2;

//def starts here

l <-> A;
r <-> M[stackP];
stackP += 4;
call flip;
stackP -= 4;
r <-> M[stackP];
fl <-> A;
assert A == 0;
r <-> A;
fl <-> M[stackP];
stackP += 4;
call flip;
stackP -= 4;
fl <-> M[stackP];
fr <-> A;
assert A == 0;
flip_exit_2 <-- A != 0;

 // res starts here

A & 3 --> inv_fr_flflip1;
inv_fr_flflip3 == 0 -->inv_fr_flflip3;
A <-> consP;
uncall cons;
inv_tflip1fr_fl <-> consA;
inv_tflip2fr_fl <-> consD;
fr <-> inv_tflip1fr_fl;
inv_tflip1fr_fl != 0 --> inv_fr_flflip2;
inv_fr_flflip3 <-- inv_tflip2fr_fl == 0;
fl <-> inv_tflip2fr_fl;
inv_fr_flflip2 <-- inv_tflip1fr_fl != 0;
fr <-> inv_tflip1fr_fl;
inv_tflip1fr_fl <-> consA;
inv_tflip2fr_fl <-> consD;
call cons;
A <-> consP;
inv_fr_flflip1 <-- A & 3;
skip
--> flip_exit_1


flip_entry_2 <--
// input of rule2
assert x == 0;

//Patterns starts here
A & 3 --> flip33;
A <-> consP;
uncall cons;
t33l_r <-> consA;
t34l_r <-> consD;
l <-> t33l_r;
t33l_r != 0 --> flip34;
r <-> t34l_r;
flip35 == 0 -->flip35;
flip34 <-- t33l_r != 0;
l <-> t33l_r;
t33l_r <-> consA;
t34l_r <-> consD;
call cons;
A <-> consP;
flip35 <-- A == 0;
flip33 <-- A & 3;
x += A;
A & 3 --> inv_l_rflip39;
inv_l_rflip41 == 0 -->inv_l_rflip41;
A <-> consP;
uncall cons;
inv_tflip39l_r <-> consA;
inv_tflip40l_r <-> consD;
l <-> inv_tflip39l_r;
inv_tflip39l_r != 0 --> inv_l_rflip40;
inv_l_rflip41 <-- inv_tflip40l_r == 0;
r <-> inv_tflip40l_r;
inv_l_rflip40 <-- inv_tflip39l_r != 0;
l <-> inv_tflip39l_r;
inv_tflip39l_r <-> consA;
inv_tflip40l_r <-> consD;
call cons;
A <-> consP;
inv_l_rflip39 <-- A & 3;
A -= x;
A != 0 --> flip_entry_3;

//def starts here


flip_exit_3 <-- A != 0;

 // res starts here

A += x;
A & 3 --> inv_l_rflip27;
inv_l_rflip29 == 0 -->inv_l_rflip29;
A <-> consP;
uncall cons;
inv_tflip27l_r <-> consA;
inv_tflip28l_r <-> consD;
l <-> inv_tflip27l_r;
inv_tflip27l_r != 0 --> inv_l_rflip28;
inv_l_rflip29 <-- inv_tflip28l_r == 0;
r <-> inv_tflip28l_r;
inv_l_rflip28 <-- inv_tflip27l_r != 0;
l <-> inv_tflip27l_r;
inv_tflip27l_r <-> consA;
inv_tflip28l_r <-> consD;
call cons;
A <-> consP;
inv_l_rflip27 <-- A & 3;
x -= A;

//Patterns starts here
A & 3 --> flip21;
A <-> consP;
uncall cons;
t21l_r <-> consA;
t22l_r <-> consD;
l <-> t21l_r;
t21l_r != 0 --> flip22;
r <-> t22l_r;
flip23 == 0 -->flip23;
flip22 <-- t21l_r != 0;
l <-> t21l_r;
t21l_r <-> consA;
t22l_r <-> consD;
call cons;
A <-> consP;
flip23 <-- A == 0;
flip21 <-- A & 3;
assert x == 0;
skip
--> flip_exit_2

flip_entry_3 <--
assert A != A
--> flip_exit_3
begin copy
assert copyP > 0 && copyQ == 0;
copyP < H --> copySymbol;
M[copyP] += 1;
ttt += M[copyP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[copyP];
copySymbol <-- copyP < H;
copyQ += copyP;
assert copyP > 0 && copyQ == copyP
end copy
//The rest of the file is cons
begin cons
assert consA != 0;
assert consD != 0;
assert consP == 0;
assert hashV == 0;
assert segEnd == 0;
call hash;
segEnd += hashV + segSize;
consP += hashV;
consSearchSame <-- consP > hashV;
M[consP] == 0 --> consNext;
consP += 4;
M[consP] != consA --> consNotA;
consP += 4;
M[consP] == consD --> consFoundSame;
consP -= 4;
consNotA <-- M[consP] != consA;
consP -= 4;
consNext <-- M[consP] == 0;
consP += 12;
consP <= segEnd --> consSearchSame;
consSearchEmpty <-- consP <= segEnd;
consP -= 12;
consP < hashV --> consFail;
M[consP] != 0 --> consSearchEmpty;
segEnd -= hashV + segSize;
uncall hash;
M[consP] += 1;
consP += 4;
consA <-> M[consP];
consP += 4;
consD <-> M[consP];
consP -= 8;
consEnd <-- M[consP] > 1;
assert consP !& 3 && consP >= H && consA == 0 && consD == 0;
assert hashV == 0 && segEnd == 0;
failedCons <-- failed > 0 // return point for fail handler
end cons

consFoundSame <--
segEnd -= hashV + segSize; // was 60
uncall hash;
consD < H --> consSymbolD;
M[consD] -= 1;
consSymbolD <-- consD < H;
consD -= M[consP];
consP -= 4;
consA < H --> consSymbolA;
M[consA] -= 1;
consSymbolA <-- consA < H;
consA -= M[consP];
consP -= 4;
M[consP] += 1;
ttt += M[consP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[consP]
--> consEnd
consFail <--
failed += 1;
assert z == 0;
z += H;
dump <-- H != z;
M[z] > 0 --> used;
y += 1;
used <-- M[z] > 0;
z += 12;
z < endH --> dump;
test y " free nodes: %d,"
--> failedCons // jump to end of cons procedure

begin hash
assert hashV == 0 && hashT ==  366001;
hashT ^= consA << 7;
hashT += consA >> 1;
hashT ^= consD << 5;
hashT += consD >> 3;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += H
end hash
