begin main
includeC "A = 0;\n";
// initialize hash codes
hashA += 366001;
hashB += 827927;
hashC += 593041;
hashT += hashA;
// heap size setup
b += 8; // segment size
b1 += b - 1;
hsize += 1<<15;
hsize += b1; // number of nodes = 2^m + b - 1
hsizeB += hsize << 2;
hsizeB += hsize << 2;
hsizeB += hsize << 2; // number of bytes
H += 4800; // heap start
endH += hsizeB + H; // heap end
lastH += endH - 12; // address of last node in heap
mask += 4<<15;
mask -= 4;
segSize += b1<<2;
segSize += b1<<2;
segSize += b1<<2;
stackP += endH;
stackP += 64;
call initialise;
call build;

call destroy;

includeC "printf(\"max refs = %d\\n\",A);";
assert z == 0;
z += H;
dump1 <-- H != z;
M[z] > 0 --> used1;
y += 1;
used1 <-- M[z] > 0;
z += 12;
z < endH --> dump1;
test y "%d,"
end main


begin initialise
consA += 2;
consD += 2;
call cons;
nilnil <-> consP
end initialise


begin build
consD += 2;
consA += 21;
call cons;
consP <-> consD;
consA += 19;
call cons;
consP <-> consD;
consA += 17;
call cons;
consP <-> consD;
consA += 15;
call cons;
consP <-> consD;
consA += 13;
call cons;
consP <-> consD;
consA += 11;
call cons;
consP <-> consD;
consA += 9;
call cons;
consP <-> consD;
consA += 7;
call cons;
consP <-> consD;
consA += 5;
call cons;
consP <-> consD;
consA += 3;
call cons;
consP <-> consD;
consD <-> A
end build


begin destroy
skip
--> destroy_entry_1
destroy_exit_1 <--
skip
end destroy

destroy_entry_1 <--
// input of rule1
A & 3 --> x_xdestroy1;
A <-> consP;
uncall cons;
t1x_x <-> consA;
t2x_x <-> consD;
x <-> t1x_x;
t1x_x != 0 --> x_xdestroy2;
t2x_x != x --> destroy5;
x <-> copyP;
t2x_x <-> copyQ;
uncall copy;
x <-> copyP;
destroy5 <-- t2x_x != 0;
t2x_x == 0 --> x_xdestroy3;
x_xdestroy2 <-- t1x_x != 0;
x <-> t1x_x;
t1x_x <-> consA;
t2x_x <-> consD;
call cons;
A <-> consP;
x_xdestroy3 <-- A == 0;
x_xdestroy1 <-- A & 3;
A != 0 --> destroy_entry_2;
//def starts here

destroy_exit_2 <-- A != 0;
//res starts here
x <-> A;
skip
--> destroy_exit_1

destroy_entry_2 <--
assert A != A
--> destroy_exit_2


begin copy
assert copyP > 0 && copyQ == 0;
copyP !& 3 --> copySymbol;
M[copyP] += 1;
ttt += M[copyP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[copyP];
copySymbol <-- copyP !& 3;
copyQ += copyP;
assert copyP > 0 && copyQ == copyP
end copy


begin fields
assert fieldsP > 0 && fieldsA == 0 && fieldsD == 0;
fieldsP += 4;
fieldsA += M[fieldsP];
fieldsA !& 3 --> fields1;
M[fieldsA] += 1;
fields1 <-- fieldsA !& 3;
fieldsP += 4;
fieldsD += M[fieldsP];
fieldsD !& 3 --> fields2;
M[fieldsD] += 1;
fields2 <-- fieldsD !& 3;
fieldsP -= 8;
assert fieldsP > 0 && fieldsA > 0 && fieldsD > 0
end fields


//The rest of the file is cons
begin cons
assert consA != 0;
assert consD != 0;
assert consP == 0;
assert hashV == 0;
assert segEnd == 0;
call hash;
segEnd += hashV + segSize;
consP += hashV;
consSearchSame <-- consP > hashV;
M[consP] == 0 --> consNext;
consP += 4;
M[consP] != consA --> consNotA;
consP += 4;
M[consP] == consD --> consFoundSame;
consP -= 4;
consNotA <-- M[consP] != consA;
consP -= 4;
consNext <-- M[consP] == 0;
consP += 12;
consP <= segEnd --> consSearchSame;
consSearchEmpty <-- consP <= segEnd;
consP -= 12;
consP < hashV --> consFail;
M[consP] != 0 --> consSearchEmpty;
segEnd -= hashV + segSize;
uncall hash;
M[consP] += 1;
consP += 4;
consA <-> M[consP];
consP += 4;
consD <-> M[consP];
consP -= 8;
consEnd <-- M[consP] > 1;
assert consP !& 3 && consP >= H && consA == 0 && consD == 0;
assert hashV == 0 && segEnd == 0;
failedCons <-- failed > 0 // return point for fail handler
end cons

consFoundSame <--
segEnd -= hashV + segSize; // was 60
uncall hash;
consD < H --> consSymbolD;
M[consD] -= 1;
consSymbolD <-- consD < H;
consD -= M[consP];
consP -= 4;
consA < H --> consSymbolA;
M[consA] -= 1;
consSymbolA <-- consA < H;
consA -= M[consP];
consP -= 4;
M[consP] += 1;
ttt += M[consP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[consP]
--> consEnd
consFail <--
failed += 1;
assert z == 0;
z += H;
dump <-- H != z;
M[z] > 0 --> used;
y += 1;
used <-- M[z] > 0;
z += 12;
z < endH --> dump;
test y " free nodes: %d,"
--> failedCons // jump to end of cons procedure

begin hash
assert hashV == 0 && hashT ==  366001;
hashT ^= consA << 7;
hashT += consA >> 1;
hashT ^= consD << 5;
hashT += consD >> 3;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += H
end hash