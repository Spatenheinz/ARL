begin main
includeC "A = 0;\n";
// initialize hash codes
hashA += 366001;
hashB += 827927;
hashC += 593041;
hashT += hashA;
// heap size setup
b += 8; // segment size
b1 += b - 1;
hsize += 1<<15;
hsize += b1; // number of nodes = 2^m + b - 1
hsizeB += hsize << 2;
hsizeB += hsize << 2;
hsizeB += hsize << 2; // number of bytes
H += 4800; // heap start
endH += hsizeB + H; // heap end
lastH += endH - 12; // address of last node in heap
mask += 4<<15;
mask -= 4;
segSize += b1<<2;
segSize += b1<<2;
segSize += b1<<2;
stackP += endH;
stackP += 64;
call initialise;
call build;

call subsequences;

includeC "printf(\"max refs = %d\\n\",A);";
assert z == 0;
z += H;
dump1 <-- H != z;
M[z] > 0 --> used1;
y += 1;
used1 <-- M[z] > 0;
z += 12;
z < endH --> dump1;
test y "%d,"
end main


begin initialise
consA += 2;
consD += 2;
call cons;
nilnil <-> consP
end initialise


begin build
consD += 2;
consA += 21;
call cons;
consP <-> consD;
consA += 19;
call cons;
consP <-> consD;
consA += 17;
call cons;
consP <-> consD;
consA += 15;
call cons;
consP <-> consD;
consA += 13;
call cons;
consP <-> consD;
consA += 11;
call cons;
consP <-> consD;
consA += 9;
call cons;
consP <-> consD;
consA += 7;
call cons;
consP <-> consD;
consA += 5;
call cons;
consP <-> consD;
consA += 3;
call cons;
consP <-> consD;
consD <-> A
end build


begin subsequences
skip
--> subsequences_entry_1
subsequences_exit_1 <--
skip
end subsequences

subsequences_entry_1 <--
// input of rule1
A != 2 --> subsequences1;
A -= 2;
subsequences1 <-- A != 0;
A != 0 --> subsequences_entry_2;
//def starts here

subsequences_exit_2 <-- A != 0;
//res starts here
A != 0 --> subsequences2;
A += nilnil;
subsequences2 <-- A != nilnil;
skip
--> subsequences_exit_1


subsequences_entry_2 <--
// input of rule2
A & 3 --> x_xssubsequences3;
A <-> consP;
uncall cons;
t3x_xs <-> consA;
t4x_xs <-> consD;
x <-> t3x_xs;
t3x_xs != 0 --> x_xssubsequences4;
xs <-> t4x_xs;
t4x_xs == 0 --> x_xssubsequences5;
x_xssubsequences4 <-- t3x_xs != 0;
x <-> t3x_xs;
t3x_xs <-> consA;
t4x_xs <-> consD;
call cons;
A <-> consP;
x_xssubsequences5 <-- A == 0;
x_xssubsequences3 <-- A & 3;
A != 0 --> subsequences_entry_3;
//def starts here
xs <-> A;
x <-> M[stackP];
stackP += 4;
call subsequences;
stackP -= 4;
x <-> M[stackP];
ss0 <-> A;
assert A == 0;
A & 3 --> inv_x_ss0subsequences17;
A == 0 --> inv_x_ss0subsequences19;
A <-> consP;
uncall cons;
inv_t_subsequences17x_ss0 <-> consA;
inv_t_subsequences18x_ss0 <-> consD;
x <-> inv_t_subsequences17x_ss0;
inv_t_subsequences17x_ss0 != 0 --> inv_x_ss0subsequences18;
inv_x_ss0subsequences19 <-- inv_t_subsequences18x_ss0 == 0;
ss0 <-> inv_t_subsequences18x_ss0;
inv_x_ss0subsequences18 <-- inv_t_subsequences17x_ss0 != 0;
x <-> inv_t_subsequences17x_ss0;
inv_t_subsequences17x_ss0 <-> consA;
inv_t_subsequences18x_ss0 <-> consD;
call cons;
A <-> consP;
inv_x_ss0subsequences17 <-- A & 3;

call consAll;

ss1 <-> A;
assert A == 0;
subsequences_exit_3 <-- A != 0;
//res starts here
ss1 <-> A;
skip
--> subsequences_exit_2

subsequences_entry_3 <--
assert A != A
--> subsequences_exit_3
begin consAll
skip
--> consAll_entry_1
consAll_exit_1 <--
skip
end consAll

consAll_entry_1 <--
// input of rule1
A & 3 --> x_s_C2_consAll1;
A <-> consP;
uncall cons;
t1x_s_C2_ <-> consA;
t2x_s_C2_ <-> consD;
x <-> t1x_s_C2_;
t1x_s_C2_ != 0 --> x_s_C2_consAll2;
t2x_s_C2_ & 3 --> s_C2_consAll5;
t2x_s_C2_ <-> consP;
uncall cons;
t5s_C2_ <-> consA;
t6s_C2_ <-> consD;
s <-> t5s_C2_;
t5s_C2_ != 0 --> s_C2_consAll6;
t6s_C2_ != 2 --> consAll9;
t6s_C2_ -= 2;
consAll9 <-- t6s_C2_ != 0;
t6s_C2_ == 0 --> s_C2_consAll7;
s_C2_consAll6 <-- t5s_C2_ != 0;
s <-> t5s_C2_;
t5s_C2_ <-> consA;
t6s_C2_ <-> consD;
call cons;
t2x_s_C2_ <-> consP;
s_C2_consAll7 <-- t2x_s_C2_ == 0;
s_C2_consAll5 <-- t2x_s_C2_ & 3;
t2x_s_C2_ == 0 --> x_s_C2_consAll3;
x_s_C2_consAll2 <-- t1x_s_C2_ != 0;
x <-> t1x_s_C2_;
t1x_s_C2_ <-> consA;
t2x_s_C2_ <-> consD;
call cons;
A <-> consP;
x_s_C2_consAll3 <-- A == 0;
x_s_C2_consAll1 <-- A & 3;
A != 0 --> consAll_entry_2;
//def starts here

consAll_exit_2 <-- A != 0;
//res starts here
A & 3 --> inv_s_x_sconsAll14;
A == 0 --> inv_s_x_sconsAll16;
A <-> consP;
uncall cons;
inv_t_consAll14s_x_s <-> consA;
inv_t_consAll15s_x_s <-> consD;
s <-> inv_t_consAll14s_x_s;
inv_t_consAll14s_x_s != 0 --> inv_s_x_sconsAll15;
inv_s_x_sconsAll16 <-- inv_t_consAll15s_x_s == 0;
inv_t_consAll15s_x_s & 3 --> inv_x_sconsAll18;
inv_t_consAll15s_x_s == 0 --> inv_x_sconsAll20;
inv_t_consAll15s_x_s <-> consP;
uncall cons;
inv_t_consAll18x_s <-> consA;
inv_t_consAll19x_s <-> consD;
x <-> inv_t_consAll18x_s;
inv_t_consAll18x_s != 0 --> inv_x_sconsAll19;
inv_x_sconsAll20 <-- inv_t_consAll19x_s == 0;
inv_t_consAll19x_s != 0 --> consAll22;
s <-> copyP;
call copy;
s <-> copyP;
inv_t_consAll19x_s <-> copyQ;
consAll22 <-- inv_t_consAll19x_s != s;
inv_x_sconsAll19 <-- inv_t_consAll18x_s != 0;
x <-> inv_t_consAll18x_s;
inv_t_consAll18x_s <-> consA;
inv_t_consAll19x_s <-> consD;
call cons;
inv_t_consAll15s_x_s <-> consP;
inv_x_sconsAll18 <-- inv_t_consAll15s_x_s & 3;
inv_s_x_sconsAll15 <-- inv_t_consAll14s_x_s != 0;
s <-> inv_t_consAll14s_x_s;
inv_t_consAll14s_x_s <-> consA;
inv_t_consAll15s_x_s <-> consD;
call cons;
A <-> consP;
inv_s_x_sconsAll14 <-- A & 3;
skip
--> consAll_exit_1


consAll_entry_2 <--
// input of rule2
A & 3 --> x_s_ssconsAll27;
A <-> consP;
uncall cons;
t27x_s_ss <-> consA;
t28x_s_ss <-> consD;
x <-> t27x_s_ss;
t27x_s_ss != 0 --> x_s_ssconsAll28;
t28x_s_ss & 3 --> s_ssconsAll31;
t28x_s_ss <-> consP;
uncall cons;
t31s_ss <-> consA;
t32s_ss <-> consD;
s <-> t31s_ss;
t31s_ss != 0 --> s_ssconsAll32;
ss <-> t32s_ss;
t32s_ss == 0 --> s_ssconsAll33;
s_ssconsAll32 <-- t31s_ss != 0;
s <-> t31s_ss;
t31s_ss <-> consA;
t32s_ss <-> consD;
call cons;
t28x_s_ss <-> consP;
s_ssconsAll33 <-- t28x_s_ss == 0;
s_ssconsAll31 <-- t28x_s_ss & 3;
t28x_s_ss == 0 --> x_s_ssconsAll29;
x_s_ssconsAll28 <-- t27x_s_ss != 0;
x <-> t27x_s_ss;
t27x_s_ss <-> consA;
t28x_s_ss <-> consD;
call cons;
A <-> consP;
x_s_ssconsAll29 <-- A == 0;
x_s_ssconsAll27 <-- A & 3;
A != 0 --> consAll_entry_3;
//def starts here
A & 3 --> inv_x_ssconsAll61;
A == 0 --> inv_x_ssconsAll63;
A <-> consP;
uncall cons;
inv_t_consAll61x_ss <-> consA;
inv_t_consAll62x_ss <-> consD;
x <-> inv_t_consAll61x_ss;
inv_t_consAll61x_ss != 0 --> inv_x_ssconsAll62;
inv_x_ssconsAll63 <-- inv_t_consAll62x_ss == 0;
ss <-> inv_t_consAll62x_ss;
inv_x_ssconsAll62 <-- inv_t_consAll61x_ss != 0;
x <-> inv_t_consAll61x_ss;
inv_t_consAll61x_ss <-> consA;
inv_t_consAll62x_ss <-> consD;
call cons;
A <-> consP;
inv_x_ssconsAll61 <-- A & 3;
x <-> M[stackP];
stackP += 4;
s <-> M[stackP];
stackP += 4;
call consAll;
stackP -= 4;
x <-> M[stackP];
stackP -= 4;
s <-> M[stackP];
ss1 <-> A;
assert A == 0;
consAll_exit_3 <-- A != 0;
//res starts here
A & 3 --> inv_s_x_s_ss1consAll40;
A == 0 --> inv_s_x_s_ss1consAll42;
A <-> consP;
uncall cons;
inv_t_consAll40s_x_s_ss1 <-> consA;
inv_t_consAll41s_x_s_ss1 <-> consD;
s <-> inv_t_consAll40s_x_s_ss1;
inv_t_consAll40s_x_s_ss1 != 0 --> inv_s_x_s_ss1consAll41;
inv_s_x_s_ss1consAll42 <-- inv_t_consAll41s_x_s_ss1 == 0;
inv_t_consAll41s_x_s_ss1 & 3 --> inv_x_s_ss1consAll44;
inv_t_consAll41s_x_s_ss1 == 0 --> inv_x_s_ss1consAll46;
inv_t_consAll41s_x_s_ss1 <-> consP;
uncall cons;
inv_t_consAll44x_s_ss1 <-> consA;
inv_t_consAll45x_s_ss1 <-> consD;
inv_t_consAll44x_s_ss1 & 3 --> x_sconsAll56;
inv_t_consAll44x_s_ss1 <-> consP;
uncall cons;
t56x_s <-> consA;
t57x_s <-> consD;
x <-> t56x_s;
t56x_s != 0 --> x_sconsAll57;
s <-> t57x_s;
t57x_s == 0 --> x_sconsAll58;
x_sconsAll57 <-- t56x_s != 0;
x <-> t56x_s;
t56x_s <-> consA;
t57x_s <-> consD;
call cons;
inv_t_consAll44x_s_ss1 <-> consP;
x_sconsAll58 <-- inv_t_consAll44x_s_ss1 == 0;
x_sconsAll56 <-- inv_t_consAll44x_s_ss1 & 3;
inv_t_consAll44x_s_ss1 != 0 --> inv_x_s_ss1consAll45;
inv_x_s_ss1consAll46 <-- inv_t_consAll45x_s_ss1 == 0;
ss1 <-> inv_t_consAll45x_s_ss1;
inv_x_s_ss1consAll45 <-- inv_t_consAll44x_s_ss1 != 0;
inv_t_consAll44x_s_ss1 & 3 --> inv_x_sconsAll47;
inv_t_consAll44x_s_ss1 == 0 --> inv_x_sconsAll49;
inv_t_consAll44x_s_ss1 <-> consP;
uncall cons;
inv_t_consAll47x_s <-> consA;
inv_t_consAll48x_s <-> consD;
x <-> inv_t_consAll47x_s;
inv_t_consAll47x_s != 0 --> inv_x_sconsAll48;
inv_x_sconsAll49 <-- inv_t_consAll48x_s == 0;
inv_t_consAll48x_s != 0 --> consAll51;
s <-> copyP;
call copy;
s <-> copyP;
inv_t_consAll48x_s <-> copyQ;
consAll51 <-- inv_t_consAll48x_s != s;
inv_x_sconsAll48 <-- inv_t_consAll47x_s != 0;
x <-> inv_t_consAll47x_s;
inv_t_consAll47x_s <-> consA;
inv_t_consAll48x_s <-> consD;
call cons;
inv_t_consAll44x_s_ss1 <-> consP;
inv_x_sconsAll47 <-- inv_t_consAll44x_s_ss1 & 3;
inv_t_consAll44x_s_ss1 <-> consA;
inv_t_consAll45x_s_ss1 <-> consD;
call cons;
inv_t_consAll41s_x_s_ss1 <-> consP;
inv_x_s_ss1consAll44 <-- inv_t_consAll41s_x_s_ss1 & 3;
inv_s_x_s_ss1consAll41 <-- inv_t_consAll40s_x_s_ss1 != 0;
s <-> inv_t_consAll40s_x_s_ss1;
inv_t_consAll40s_x_s_ss1 <-> consA;
inv_t_consAll41s_x_s_ss1 <-> consD;
call cons;
A <-> consP;
inv_s_x_s_ss1consAll40 <-- A & 3;
skip
--> consAll_exit_2

consAll_entry_3 <--
assert A != A
--> consAll_exit_3


begin copy
assert copyP > 0 && copyQ == 0;
copyP !& 3 --> copySymbol;
M[copyP] += 1;
ttt += M[copyP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[copyP];
copySymbol <-- copyP !& 3;
copyQ += copyP;
assert copyP > 0 && copyQ == copyP
end copy


begin fields
assert fieldsP > 0 && fieldsA == 0 && fieldsD == 0;
fieldsP += 4;
fieldsA += M[fieldsP];
fieldsA !& 3 --> fields1;
M[fieldsA] += 1;
fields1 <-- fieldsA !& 3;
fieldsP += 4;
fieldsD += M[fieldsP];
fieldsD !& 3 --> fields2;
M[fieldsD] += 1;
fields2 <-- fieldsD !& 3;
fieldsP -= 8;
assert fieldsP > 0 && fieldsA > 0 && fieldsD > 0
end fields


//The rest of the file is cons
begin cons
assert consA != 0;
assert consD != 0;
assert consP == 0;
assert hashV == 0;
assert segEnd == 0;
call hash;
segEnd += hashV + segSize;
consP += hashV;
consSearchSame <-- consP > hashV;
M[consP] == 0 --> consNext;
consP += 4;
M[consP] != consA --> consNotA;
consP += 4;
M[consP] == consD --> consFoundSame;
consP -= 4;
consNotA <-- M[consP] != consA;
consP -= 4;
consNext <-- M[consP] == 0;
consP += 12;
consP <= segEnd --> consSearchSame;
consSearchEmpty <-- consP <= segEnd;
consP -= 12;
consP < hashV --> consFail;
M[consP] != 0 --> consSearchEmpty;
segEnd -= hashV + segSize;
uncall hash;
M[consP] += 1;
consP += 4;
consA <-> M[consP];
consP += 4;
consD <-> M[consP];
consP -= 8;
consEnd <-- M[consP] > 1;
assert consP !& 3 && consP >= H && consA == 0 && consD == 0;
assert hashV == 0 && segEnd == 0;
failedCons <-- failed > 0 // return point for fail handler
end cons

consFoundSame <--
segEnd -= hashV + segSize; // was 60
uncall hash;
consD < H --> consSymbolD;
M[consD] -= 1;
consSymbolD <-- consD < H;
consD -= M[consP];
consP -= 4;
consA < H --> consSymbolA;
M[consA] -= 1;
consSymbolA <-- consA < H;
consA -= M[consP];
consP -= 4;
M[consP] += 1;
ttt += M[consP];
includeC "if (A < var_ttt) A = var_ttt;";
ttt -= M[consP]
--> consEnd
consFail <--
failed += 1;
assert z == 0;
z += H;
dump <-- H != z;
M[z] > 0 --> used;
y += 1;
used <-- M[z] > 0;
z += 12;
z < endH --> dump;
test y " free nodes: %d,"
--> failedCons // jump to end of cons procedure

begin hash
assert hashV == 0 && hashT ==  366001;
hashT ^= consA << 7;
hashT += consA >> 1;
hashT ^= consD << 5;
hashT += consD >> 3;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += hashT & mask;
hashV += H
end hash